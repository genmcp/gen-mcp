{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/genmcp/gen-mcp/pkg/mcpfile/mcp-file",
  "$ref": "#/$defs/MCPFile",
  "$defs": {
    "AuthConfig": {
      "properties": {
        "authorizationServers": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of authorization server URLs for token validation."
        },
        "jwksUri": {
          "type": "string",
          "description": "URI for the JSON Web Key Set (JWKS) used for token verification."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "AuthConfig defines OAuth 2.0 authorization settings."
    },
    "CliInvocationConfig": {
      "properties": {
        "command": {
          "type": "string",
          "description": "The command-line string to be executed. It can contain placeholders in the form of '%' which correspond to parameters defined in the input schema."
        },
        "templateVariables": {
          "additionalProperties": {
            "$ref": "#/$defs/TemplateVariable"
          },
          "type": "object",
          "description": "Defines how input parameters are formatted into the command string.\nThe map key corresponds to the parameter name from the input schema."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "command"
      ],
      "description": "Configuration for executing a command-line tool."
    },
    "CliInvocationData": {
      "properties": {
        "cli": {
          "$ref": "#/$defs/CliInvocationConfig",
          "description": "Detailed CLI invocation configuration."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "cli"
      ],
      "description": "The structure for CLI invocation configuration."
    },
    "HttpInvocationConfig": {
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL template for the HTTP request. It can contain placeholders in the form of '%' which correspond to parameters from the input schema."
        },
        "method": {
          "type": "string",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "PATCH",
            "DELETE",
            "HEAD"
          ],
          "description": "The HTTP method to be used for the request (e.g., \"GET\", \"POST\")."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "url",
        "method"
      ],
      "description": "The configuration for making an HTTP request."
    },
    "HttpInvocationData": {
      "properties": {
        "http": {
          "$ref": "#/$defs/HttpInvocationConfig",
          "description": "Detailed HTTP invocation configuration."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "http"
      ],
      "description": "The structure for HTTP invocation configuration."
    },
    "LoggingConfig": {
      "properties": {
        "level": {
          "type": "string"
        },
        "development": {
          "type": "boolean"
        },
        "disableCaller": {
          "type": "boolean"
        },
        "disableStacktrace": {
          "type": "boolean"
        },
        "encoding": {
          "type": "string"
        },
        "outputPaths": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "errorOutputPaths": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "initialFields": {
          "type": "object"
        },
        "enableMcpLogs": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "MCPFile": {
      "properties": {
        "mcpFileVersion": {
          "type": "string",
          "description": "Version of the MCP file format."
        },
        "name": {
          "type": "string",
          "description": "Name of the MCP server."
        },
        "version": {
          "type": "string",
          "description": "Semantic version of the MCP server."
        },
        "runtime": {
          "$ref": "#/$defs/ServerRuntime",
          "description": "Runtime configuration for the MCP server."
        },
        "instructions": {
          "type": "string",
          "description": "A set of instructions provided by the server to the client about how to use the server"
        },
        "tools": {
          "items": {
            "$ref": "#/$defs/Tool"
          },
          "type": "array",
          "description": "List of tools provided by the server."
        },
        "prompts": {
          "items": {
            "$ref": "#/$defs/Prompt"
          },
          "type": "array",
          "description": "List of prompts provided by the server."
        },
        "resources": {
          "items": {
            "$ref": "#/$defs/Resource"
          },
          "type": "array",
          "description": "Set of resources available to the server."
        },
        "resourceTemplates": {
          "items": {
            "$ref": "#/$defs/ResourceTemplate"
          },
          "type": "array",
          "description": "Set of resource templates available to the server."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "mcpFileVersion",
        "name",
        "version"
      ],
      "description": "MCPFile is the root structure of an MCP configuration file."
    },
    "Prompt": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique identifier for the prompt."
        },
        "title": {
          "type": "string",
          "description": "Human-readable title for display purposes."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of what the prompt does."
        },
        "arguments": {
          "items": {
            "$ref": "#/$defs/PromptArgument"
          },
          "type": "array",
          "description": "List of template arguments for the prompt."
        },
        "inputSchema": {
          "$ref": "#/$defs/Schema",
          "description": "Schema describing input parameters."
        },
        "outputSchema": {
          "$ref": "#/$defs/Schema",
          "description": "Optional schema describing prompt output."
        },
        "invocation": {
          "oneOf": [
            {
              "$ref": "#/$defs/HttpInvocationData"
            },
            {
              "$ref": "#/$defs/CliInvocationData"
            }
          ],
          "description": "Object describing how to invoke the prompt."
        },
        "requiredScopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "OAuth scopes required to invoke this prompt."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name",
        "description",
        "inputSchema",
        "invocation"
      ],
      "description": "Prompt represents a natural-language or LLM-style function invocation."
    },
    "PromptArgument": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique identifier for the argument."
        },
        "title": {
          "type": "string",
          "description": "Human-readable title for display."
        },
        "description": {
          "type": "string",
          "description": "Detailed explanation of the argument."
        },
        "required": {
          "type": "boolean",
          "description": "Indicates if the argument is mandatory."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name"
      ],
      "description": "PromptArgument defines a variable that can be substituted into a prompt template."
    },
    "Resource": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique identifier for the resource."
        },
        "title": {
          "type": "string",
          "description": "Human-readable title for display purposes."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the resource."
        },
        "mimeType": {
          "type": "string",
          "description": "The MIME type of this resource, if known."
        },
        "size": {
          "type": "integer",
          "description": "The size of the raw resource content in bytes, if known."
        },
        "uri": {
          "type": "string",
          "description": "The URI of this resource."
        },
        "inputSchema": {
          "$ref": "#/$defs/Schema",
          "description": "Schema describing input parameters."
        },
        "outputSchema": {
          "$ref": "#/$defs/Schema",
          "description": "Optional schema describing resource output."
        },
        "invocation": {
          "oneOf": [
            {
              "$ref": "#/$defs/HttpInvocationData"
            },
            {
              "$ref": "#/$defs/CliInvocationData"
            }
          ],
          "description": "Object describing how to invoke the resource."
        },
        "requiredScopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "OAuth scopes required to access this resource."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name",
        "description",
        "uri",
        "inputSchema",
        "invocation"
      ],
      "description": "Resource represents a retrievable or executable resource."
    },
    "ResourceTemplate": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique identifier for the resource template."
        },
        "title": {
          "type": "string",
          "description": "Human-readable title for display purposes."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the resource template."
        },
        "mimeType": {
          "type": "string",
          "description": "MIME type for resources matching this template."
        },
        "uriTemplate": {
          "type": "string",
          "description": "URI template (RFC 6570) used to construct resource URIs."
        },
        "inputSchema": {
          "$ref": "#/$defs/Schema",
          "description": "Schema describing input parameters."
        },
        "outputSchema": {
          "$ref": "#/$defs/Schema",
          "description": "Optional schema describing resource output."
        },
        "invocation": {
          "oneOf": [
            {
              "$ref": "#/$defs/HttpInvocationData"
            },
            {
              "$ref": "#/$defs/CliInvocationData"
            }
          ],
          "description": "Object describing how to invoke the resource template."
        },
        "requiredScopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "OAuth scopes required to access this resource template."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name",
        "description",
        "uriTemplate",
        "inputSchema",
        "invocation"
      ],
      "description": "ResourceTemplate represents a reusable URI-based template for resources."
    },
    "Schema": {
      "properties": {
        "$id": {
          "type": "string"
        },
        "$schema": {
          "type": "string"
        },
        "$ref": {
          "type": "string"
        },
        "$comment": {
          "type": "string"
        },
        "$defs": {
          "additionalProperties": {
            "$ref": "#/$defs/Schema"
          },
          "type": "object"
        },
        "definitions": {
          "additionalProperties": {
            "$ref": "#/$defs/Schema"
          },
          "type": "object"
        },
        "$anchor": {
          "type": "string"
        },
        "$dynamicAnchor": {
          "type": "string"
        },
        "$dynamicRef": {
          "type": "string"
        },
        "$vocabulary": {
          "additionalProperties": {
            "type": "boolean"
          },
          "type": "object"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "default": true,
        "deprecated": {
          "type": "boolean"
        },
        "readOnly": {
          "type": "boolean"
        },
        "writeOnly": {
          "type": "boolean"
        },
        "examples": {
          "items": true,
          "type": "array"
        },
        "enum": {
          "items": true,
          "type": "array"
        },
        "const": true,
        "multipleOf": {
          "type": "number"
        },
        "minimum": {
          "type": "number"
        },
        "maximum": {
          "type": "number"
        },
        "exclusiveMinimum": {
          "type": "number"
        },
        "exclusiveMaximum": {
          "type": "number"
        },
        "minLength": {
          "type": "integer"
        },
        "maxLength": {
          "type": "integer"
        },
        "pattern": {
          "type": "string"
        },
        "prefixItems": {
          "items": {
            "$ref": "#/$defs/Schema"
          },
          "type": "array"
        },
        "items": {
          "$ref": "#/$defs/Schema"
        },
        "minItems": {
          "type": "integer"
        },
        "maxItems": {
          "type": "integer"
        },
        "additionalItems": {
          "$ref": "#/$defs/Schema"
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "contains": {
          "$ref": "#/$defs/Schema"
        },
        "minContains": {
          "type": "integer"
        },
        "maxContains": {
          "type": "integer"
        },
        "unevaluatedItems": {
          "$ref": "#/$defs/Schema"
        },
        "minProperties": {
          "type": "integer"
        },
        "maxProperties": {
          "type": "integer"
        },
        "required": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dependentRequired": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": "object"
        },
        "properties": {
          "additionalProperties": {
            "$ref": "#/$defs/Schema"
          },
          "type": "object"
        },
        "patternProperties": {
          "additionalProperties": {
            "$ref": "#/$defs/Schema"
          },
          "type": "object"
        },
        "additionalProperties": {
          "$ref": "#/$defs/Schema"
        },
        "propertyNames": {
          "$ref": "#/$defs/Schema"
        },
        "unevaluatedProperties": {
          "$ref": "#/$defs/Schema"
        },
        "allOf": {
          "items": {
            "$ref": "#/$defs/Schema"
          },
          "type": "array"
        },
        "anyOf": {
          "items": {
            "$ref": "#/$defs/Schema"
          },
          "type": "array"
        },
        "oneOf": {
          "items": {
            "$ref": "#/$defs/Schema"
          },
          "type": "array"
        },
        "not": {
          "$ref": "#/$defs/Schema"
        },
        "if": {
          "$ref": "#/$defs/Schema"
        },
        "then": {
          "$ref": "#/$defs/Schema"
        },
        "else": {
          "$ref": "#/$defs/Schema"
        },
        "dependentSchemas": {
          "additionalProperties": {
            "$ref": "#/$defs/Schema"
          },
          "type": "object"
        },
        "contentEncoding": {
          "type": "string"
        },
        "contentMediaType": {
          "type": "string"
        },
        "contentSchema": {
          "$ref": "#/$defs/Schema"
        },
        "format": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "ServerRuntime": {
      "properties": {
        "transportProtocol": {
          "type": "string",
          "description": "Transport protocol to use (streamablehttp or stdio)."
        },
        "streamableHttpConfig": {
          "$ref": "#/$defs/StreamableHTTPConfig",
          "description": "Configuration for streamable HTTP transport protocol."
        },
        "stdioConfig": {
          "$ref": "#/$defs/StdioConfig",
          "description": "Configuration for stdio transport protocol."
        },
        "loggingConfig": {
          "$ref": "#/$defs/LoggingConfig",
          "description": "Configuration for the server logging"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "transportProtocol",
        "loggingConfig"
      ],
      "description": "ServerRuntime defines transport protocol and associated configuration."
    },
    "StdioConfig": {
      "properties": {},
      "additionalProperties": false,
      "type": "object",
      "description": "StdioConfig defines configuration for stdio transport protocol."
    },
    "StreamableHTTPConfig": {
      "properties": {
        "port": {
          "type": "integer",
          "description": "Port number to listen on."
        },
        "basePath": {
          "type": "string",
          "description": "Base path for the MCP server (default: /mcp)."
        },
        "stateless": {
          "type": "boolean",
          "description": "Indicates whether the server is stateless."
        },
        "auth": {
          "$ref": "#/$defs/AuthConfig",
          "description": "OAuth 2.0 configuration for protected resources."
        },
        "tls": {
          "$ref": "#/$defs/TLSConfig",
          "description": "TLS configuration for HTTPS."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "port",
        "stateless"
      ],
      "description": "StreamableHTTPConfig defines configuration for the HTTP-based runtime."
    },
    "TLSConfig": {
      "properties": {
        "certFile": {
          "type": "string",
          "description": "Absolute path to the server's public certificate."
        },
        "keyFile": {
          "type": "string",
          "description": "Absolute path to the server's private key."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "TLSConfig defines paths to TLS certificate and private key files."
    },
    "TemplateVariable": {
      "properties": {
        "format": {
          "type": "string",
          "description": "Template is the format string for the variable. It can be a simple string or a Go format string containing a verb like '%s', '%d', etc.\nFor example, \"--user=%s\" or \"--verbose\"."
        },
        "omitIfFalse": {
          "type": "boolean",
          "description": "OmitIfFalse, if true, causes the template to be omitted entirely if the input\nvalue is a boolean `false`. This is useful for optional flags like \"--force\"."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "format"
      ],
      "description": "The formatting for a single parameter in the command template"
    },
    "Tool": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Unique identifier for the tool."
        },
        "title": {
          "type": "string",
          "description": "Human-readable title for display purposes."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the tool's purpose."
        },
        "inputSchema": {
          "$ref": "#/$defs/Schema",
          "description": "JSON Schema describing input parameters."
        },
        "outputSchema": {
          "$ref": "#/$defs/Schema",
          "description": "Optional JSON Schema describing output."
        },
        "invocation": {
          "oneOf": [
            {
              "$ref": "#/$defs/HttpInvocationData"
            },
            {
              "$ref": "#/$defs/CliInvocationData"
            }
          ],
          "description": "Object describing how to execute the tool."
        },
        "requiredScopes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "OAuth scopes required to invoke this tool."
        },
        "annotations": {
          "$ref": "#/$defs/ToolAnnotations",
          "description": "Annotations to indicate tool behaviour to the client."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "name",
        "description",
        "inputSchema",
        "invocation",
        "annotations"
      ],
      "description": "Tool represents an executable capability of the MCP server."
    },
    "ToolAnnotations": {
      "properties": {
        "destructiveHint": {
          "type": "boolean",
          "description": "If true, the tool may perform destructive updates to its environment. If\nfalse, the tool performs only additive updates"
        },
        "idempotentHint": {
          "type": "boolean",
          "description": "If true, calling the tool repeatedly with the same arguments will have no additional\neffect on its environment"
        },
        "openWorldHint": {
          "type": "boolean",
          "description": "If true, this tool may interact with an \"open world\" or external entities. If\nfalse, this tool's domain of interaction is closed. For example, the world of\na web search tool is open, whereas that of a memory tool is not."
        },
        "readOnlyHint": {
          "type": "boolean",
          "description": "If true, the tool does not modify its environment"
        }
      },
      "additionalProperties": false,
      "type": "object"
    }
  }
}